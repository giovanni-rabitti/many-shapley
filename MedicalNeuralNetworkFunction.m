function [y1] = MedicalNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 29-May-2022 18:09:25.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx10 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [18;0;0;0;0;145;51;0;0;0];
x1_step1.gain = [0.0416666666666667;2;2;2;2;0.0465116279069767;0.0246913580246914;2;2;0.666666666666667];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.30173160014723482414;-0.54525240411852349265;0.6471682247577493774;-1.9975422858632536638;-0.035598149670408571477;0.32498220592497351067;0.2628918637802796221;-0.52538681917224550055;0.54833872106427861137;-0.81813099965701308047];
IW1_1 = [0.81231257966875070053 0.095912589682840818095 -0.40154019866896401014 -0.030014817357582358748 -0.0374273717264945599 0.031935060606108262027 -1.2528316574583056031 -0.47650611988842922484 -0.12401169623169795708 -0.94918837286409152298;-0.94237342479259200712 0.01674377378013856485 0.3040929894677573686 0.059250911592912035297 0.013721009371907679289 -0.092941532178962768529 0.60815850803459892138 -1.8159155591102700278 0.082238437773528655361 0.6842518036897428102;1.6029945203329074577 -0.014059940701558188217 0.016161103206654120479 0.49599569059950643357 0.28986795549165383923 0.0053869125217300226766 0.21590480560678901312 0.047269742337192666159 -0.26979576138686195419 -0.20439110206099006528;-3.4028567451763191976 0.038372880725970996696 -0.095523073841117481231 -0.21084723155142806594 -0.18316410365634722135 -0.010144080899906768659 -0.3948681025831367597 -0.037187469486436884603 0.12928813130166874612 0.096373206456487017779;0.30163497904425778939 0.066835808648484443251 -0.16068932569483299067 0.11129973432270595657 -0.35411860047386023442 0.032279957458178430707 -0.4876467976010954164 -0.0094874048284104162826 -0.11711587823601676828 -0.16374928461016427517;0.032375663107659824469 0.054894601848013785395 0.08877173304415973687 0.37503501943362937965 -0.10046396972518890911 0.02385612838304729949 0.80356943258509461181 0.34225069896426468796 0.10905596698293142099 -1.9535339596213163738;-0.33160465870130212407 0.037077344285375068988 0.21086641587830132205 0.44685203354275843113 -0.073821610694072961611 -0.017879829569868443961 -0.18816505950416598236 -0.38968006981293995539 -0.14179472807344709051 0.64838745400165653798;1.0438301219914143392 -0.0012870189131723125224 0.2245524063314670582 0.021550257269809362098 -0.26384208130130154535 0.024655472390516165737 0.97139010890615995475 0.16123151154902262694 -0.088094651280023694717 0.20757755213448383924;1.086582277853033407 0.024770630155085807123 1.2505519549632471143 0.26135293988550978295 0.074212566430221074687 0.11126451354842961661 0.56869084817932491482 -0.071402296721365457466 0.062564694534287937366 0.49884014956943811825;-3.3681668874214945042 0.017078689097749184811 -0.10430960549293136208 -1.2449085211628221348 -0.40628399053624625337 -0.0016005077700788857865 -0.32336335167829760584 -0.024426487176421630976 0.36472668299626642696 0.16473491322840180806];

% Layer 2
b2 = 0.063283590591580535234;
LW2_1 = [0.9324593737360843404 -0.82987523778879979108 -2.4007817671990006048 -1.3678749007544790395 -1.7989312960471326441 0.53426775910614110465 1.6032021557477349472 1.0339421006066582542 -0.53876973248485104939 -1.113578764341554006];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 8e-05;
y1_step1.xoffset = 15000;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
